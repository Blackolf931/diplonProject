__   __ __  __  ____   ___      _______________________________________________
||   || ||  || ||  || ||__      Hugs 98: Based on the Haskell 98 standard
||___|| ||__|| ||__||  __||     Copyright (c) 1994-2005
||---||         ___||           World Wide Web: http://haskell.org/hugs
||   ||                         Bugs: http://hackage.haskell.org/trac/hugs
||   || Version: Sep 2006       _______________________________________________

Haskell 98 mode: Restart with command line option -98 to enable extensions

ERROR - Can't find module "Hugs"
Prelude> set+t
ERROR - Undefined variable "t"
Prelude> set+ t
ERROR - Undefined variable "t"
Prelude> set+ 150
ERROR - Undefined variable "set"
Prelude> :set + t
ERROR - Option string must begin with `+' or `-'
Prelude> :set+t
Command not recognised.  Type :? for help
Prelude> 1
1
Prelude> 50000
50000
Prelude> :set+t
Command not recognised.  Type :? for help
Prelude> :set+t
Command not recognised.  Type :? for help
Prelude> :set +t
Prelude> 50000
50000 :: Integer
Prelude> :set +t
Prelude> 5.555
5.555 :: Double
Prelude> :set +t
Prelude> 5
5 :: Integer
Prelude> :set +t
Prelude> "5555"
"5555" :: String
Prelude> :set +t
Prelude> True
True :: Bool
Prelude> 5^2 +2*4-3
30 :: Integer
Prelude> sqrt 9 -1
2.0 :: Double
Prelude> sqrt 9 - sqrt 1
2.0 :: Double
Prelude> sqrt (9 - 1)
2.82842712474619 :: Double
Prelude> 5^5000
nteger
Prelude> 2 *cospi
ERROR - Undefined variable "cospi"
Prelude> 2 *cos pi
-2.0 :: Double
Prelude> (5,(("hello","world"),'a))'
ERROR - Improperly terminated character constant
Prelude> (5,(("hello","world"),'a'))
(5,(("hello","world"),'a')) :: (Integer,(([Char],[Char]),Char))
Prelude> fst
ERROR - Cannot find "show" function for:
*** Expression : fst
*** Of type    : (a,b) -> a

Prelude> fst(5,(("hello","world"),'a'))
5 :: Integer
Prelude> snd(5,(("hello","world"),'a'))
(("hello","world"),'a') :: (([Char],[Char]),Char)
Prelude> (5,fst(("hello","world"),'a'))
(5,("hello","world")) :: (Integer,([Char],[Char]))
Prelude> (5,(fst("hello","world"),'a'))
(5,("hello",'a')) :: (Integer,([Char],Char))
Prelude> (5,((fst "hello","world"),'a'))
ERROR - Type error in application
*** Expression     : fst "hello"
*** Term           : "hello"
*** Type           : String
*** Does not match : (a,b)

Prelude> (5,(snd("hello","world"),'a'))
(5,("world",'a')) :: (Integer,([Char],Char))
Prelude> snd(5,(("hello","world"),'a'))
(("hello","world"),'a') :: (([Char],[Char]),Char)
Prelude> snd fst(5,(("hello","world"),'a'))
ERROR - Type error in application
*** Expression     : snd fst (5,(("hello","world"),'a'))
*** Term           : fst
*** Type           : (d,e) -> d
*** Does not match : (a,(b,(([Char],[Char]),Char)) -> c)

Prelude> snd (5,(fst("hello","world"),'a'))
("hello",'a') :: ([Char],Char)
Prelude> snd (5,snd(fst("hello","world"),'a'))
'a' :: Char
Prelude> fst(5,(fst("hello","world"),'a'))
5 :: Integer
Prelude> (5,fst(fst("hello","world"),'a'))
(5,"hello") :: (Integer,[Char])
Prelude> snd(5,fst(fst("hello","world"),'a'))
"hello" :: [Char]
Prelude> snd fst fst(5,(("hello","world"),'a'))
ERROR - Type error in application
*** Expression     : snd fst fst (5,(("hello","world"),'a'))
*** Term           : fst
*** Type           : (f,g) -> f
*** Does not match : (a,((b,c) -> b) -> (d,(([Char],[Char]),Char)) -> e)

Prelude> snd fst fst(5,(("hello","world"),'a'))
ERROR - Type error in application
*** Expression     : snd fst fst (5,(("hello","world"),'a'))
*** Term           : fst
*** Type           : (f,g) -> f
*** Does not match : (a,((b,c) -> b) -> (d,(([Char],[Char]),Char)) -> e)

Prelude> fst(5,(("hello","world"),'a'))
5 :: Integer
Prelude> fst snd(5,(("hello","world"),'a'))
ERROR - Type error in application
*** Expression     : fst snd (5,(("hello","world"),'a'))
*** Term           : snd
*** Type           : (d,e) -> e
*** Does not match : ((a,(([Char],[Char]),Char)) -> b,c)

Prelude> fstsnd(5,(("hello","world"),'a'))
ERROR - Undefined variable "fstsnd"
Prelude> fst snd(5,(("hello","world"),'a'))
ERROR - Type error in application
*** Expression     : fst snd (5,(("hello","world"),'a'))
*** Term           : snd
*** Type           : (d,e) -> e
*** Does not match : ((a,(([Char],[Char]),Char)) -> b,c)

Prelude> snd (fst (5,(("hello","world"),'a')))
ERROR - Cannot infer instance
*** Instance   : Num (a,b)
*** Expression : snd (fst (5,(("hello","world"),'a')))

Prelude> snd (fst(5,(("hello","world"),'a')))
ERROR - Cannot infer instance
*** Instance   : Num (a,b)
*** Expression : snd (fst (5,(("hello","world"),'a')))

Prelude> fst(snd(5,(("hello","world"),'a')))
("hello","world") :: ([Char],[Char])
Prelude> fst(fst(snd(5,(("hello","world"),'a'))))
"hello" :: [Char]
Prelude> snd(fst(snd(5,(("hello","world"),'a'))))
"world" :: [Char]
Prelude> snd(snd(fst(5,(("hello","world"),'a'))))
ERROR - Cannot infer instance
*** Instance   : Num (a,(b,c))
*** Expression : snd (snd (fst (5,(("hello","world"),'a'))))

Prelude> snd(snd((5,(("hello","world"),'a'))))
'a' :: Char
Prelude> 1:[2,3]
[1,2,3] :: [Integer]
Prelude> '1':[2,3]
ERROR - Cannot infer instance
*** Instance   : Num Char
*** Expression : '1' : [2,3]

Prelude> zip["20,30"]
ERROR - Cannot find "show" function for:
*** Expression : zip ["20,30"]
*** Of type    : [a] -> [([Char],a)]

Prelude> zip ["20,30"]
ERROR - Cannot find "show" function for:
*** Expression : zip ["20,30"]
*** Of type    : [a] -> [([Char],a)]

Prelude> zip ["20,30"][1,2,3]
[("20,30",1)] :: [([Char],Integer)]
Prelude> take ["20,30"][1,2,3]
ERROR - Type error in application
*** Expression     : take ["20,30"] [1,2,3]
*** Term           : ["20,30"]
*** Type           : [[Char]]
*** Does not match : Int

Prelude> take 2 ["20,30"][1,2,3]
ERROR - Type error in application
*** Expression     : take 2 ["20,30"] [1,2,3]
*** Term           : take
*** Type           : Int -> [e] -> [e]
*** Does not match : a -> b -> c -> d

Prelude> take 2["20,30"][1,2,3]
ERROR - Type error in application
*** Expression     : take 2 ["20,30"] [1,2,3]
*** Term           : take
*** Type           : Int -> [e] -> [e]
*** Does not match : a -> b -> c -> d

Prelude> take2 ["20,30"][1,2,3]
ERROR - Undefined variable "take2"
Prelude> take 2["20,30"][1,2,3]
ERROR - Type error in application
*** Expression     : take 2 ["20,30"] [1,2,3]
*** Term           : take
*** Type           : Int -> [e] -> [e]
*** Does not match : a -> b -> c -> d

Prelude> take 2["20,30"]
["20,30"] :: [[Char]]
Prelude> take 2["20","30"]
["20","30"] :: [[Char]]
Prelude> take 2["20","30",5]
ERROR - Cannot infer instance
*** Instance   : Num [Char]
*** Expression : take 2 ["20","30",5]

Prelude> take 2["20","30","5"]
["20","30"] :: [[Char]]
Prelude> take 3["20","30","5"]
["20","30","5"] :: [[Char]]
Prelude> head ["20","30","5"]
"20" :: [Char]
Prelude>  ["20","30","5"]zip
ERROR - Type error in application
*** Expression     : ["20","30","5"] zip
*** Term           : ["20","30","5"]
*** Type           : [[Char]]
*** Does not match : a -> b

Prelude> zip ["20","30","5"]
ERROR - Cannot find "show" function for:
*** Expression : zip ["20","30","5"]
*** Of type    : [a] -> [([Char],a)]

Prelude> zip [["20"],30] [1,2]
ERROR - Cannot infer instance
*** Instance   : Num [[Char]]
*** Expression : zip [["20"],30] [1,2]

Prelude> zip ["20","30"] [1,2]
[("20",1),("30",2)] :: [([Char],Integer)]
Prelude> zip ["20","30"] [1,2] ["aaa"] [1.30]
ERROR - Type error in application
*** Expression     : zip ["20","30"] [1,2] ["aaa"] [1.3]
*** Term           : zip
*** Type           : [f] -> [g] -> [(f,g)]
*** Does not match : a -> b -> c -> d -> e

Prelude> zip ["20","30"] [1,2] ["aaa"] [,30]
ERROR - Syntax error in expression (unexpected comma)
Prelude> zip ["20","30"] [1,2] ["aaa"] [1,30]
ERROR - Type error in application
*** Expression     : zip ["20","30"] [1,2] ["aaa"] [1,30]
*** Term           : zip
*** Type           : [f] -> [g] -> [(f,g)]
*** Does not match : a -> b -> c -> d -> e

Prelude> zip ["20","30"] [1,2] ['aaa'] [1,30]
ERROR - Improperly terminated character constant
Prelude> zip ["20","30"] [1,2] ['aaa','bbb'] [1,30]
ERROR - Improperly terminated character constant
Prelude> zip ['20','30'] [1,2]
ERROR - Improperly terminated character constant
Prelude> zip ["20","30"] [1,2] ["aaa","bbb"] [1,30]
ERROR - Type error in application
*** Expression     : zip ["20","30"] [1,2] ["aaa","bbb"] [1,30]
*** Term           : zip
*** Type           : [f] -> [g] -> [(f,g)]
*** Does not match : a -> b -> c -> d -> e

Prelude> [(5,"ds")]
[(5,"ds")] :: [(Integer,[Char])]
Prelude> [("ds",5)]
[("ds",5)] :: [([Char],Integer)]
Prelude> [(("ds",5))]
[("ds",5)] :: [([Char],Integer)]
Prelude> [("ds",5)] [("ada"),true]
ERROR - Undefined variable "true"
Prelude> [("ds",5)] [(("ada"),true)]
ERROR - Undefined variable "true"
Prelude> [("ds",5)] [(("ada"),"true")]
ERROR - Type error in application
*** Expression     : [("ds",5)] [("ada","true")]
*** Term           : [("ds",5)]
*** Type           : [([Char],c)]
*** Does not match : a -> b

Prelude> [("ds",5)] [(("ada","5"))]
ERROR - Type error in application
*** Expression     : [("ds",5)] [("ada","5")]
*** Term           : [("ds",5)]
*** Type           : [([Char],c)]
*** Does not match : a -> b

Prelude> [("ds",5)] [("ada")]
ERROR - Type error in application
*** Expression     : [("ds",5)] ["ada"]
*** Term           : [("ds",5)]
*** Type           : [([Char],c)]
*** Does not match : a -> b

Prelude> [("ds",5)] [("ada",5)]
ERROR - Type error in application
*** Expression     : [("ds",5)] [("ada",5)]
*** Term           : [("ds",5)]
*** Type           : [([Char],c)]
*** Does not match : a -> b

Prelude> [("ds",5)] zip[("ada",5)]
ERROR - Type error in application
*** Expression     : [("ds",5)] zip [("ada",5)]
*** Term           : [("ds",5)]
*** Type           : [([Char],d)]
*** Does not match : a -> b -> c

Prelude> [("ds",5)]zip [("ada",5)]
ERROR - Type error in application
*** Expression     : [("ds",5)] zip [("ada",5)]
*** Term           : [("ds",5)]
*** Type           : [([Char],d)]
*** Does not match : a -> b -> c

Prelude> [("ds",5)]zip [("ada",5.2)]
ERROR - Type error in application
*** Expression     : [("ds",5)] zip [("ada",5.2)]
*** Term           : [("ds",5)]
*** Type           : [([Char],d)]
*** Does not match : a -> b -> c

Prelude> [("ds",5)]
[("ds",5)] :: [([Char],Integer)]
Prelude> (("ds",5))
("ds",5) :: ([Char],Integer)
Prelude> (("d",5))
("d",5) :: ([Char],Integer)
Prelude> (('d',5))
('d',5) :: (Char,Integer)
Prelude> (('d',5),"aaaa")
(('d',5),"aaaa") :: ((Char,Integer),[Char])
Prelude> (('d',5),aaaa)
ERROR - Undefined variable "aaaa"
Prelude> (('d',5),'aaaa')
ERROR - Improperly terminated character constant
Prelude> (('d',5),"aaaa") [2.34]
ERROR - Type error in application
*** Expression     : (('d',5),"aaaa") [2.34]
*** Term           : (,)
*** Type           : e -> f -> (e,f)
*** Does not match : a -> b -> c -> d

Prelude> (('d',5),"aaaa")) [2.34]
ERROR - Syntax error in input (unexpected `)')
Prelude> (('d',5),"aaaa")[2.34])
ERROR - Syntax error in input (unexpected `)')
Prelude> (('d',5),"aaaa"),[2.34])
ERROR - Syntax error in input (unexpected comma)
Prelude> (('d',5),"aaaa",[2.34])
(('d',5),"aaaa",[2.34]) :: ((Char,Integer),[Char],[Double])
Prelude> [("ada",5.2)]